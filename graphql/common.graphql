fragment MediaFields on Media {
  url
  width
  height
  mimeType
}

fragment ProfileFields on Profile {
  id
  name
  bio
  attributes {
    displayType
    traitType
    key
    value
  }
  isFollowedByMe
  isFollowing(who: null)
  followNftAddress
  metadata
  isDefault
  handle
  picture {
    ... on NftImage {
      contractAddress
      tokenId
      uri
      verified
    }
    ... on MediaSet {
      original {
        ...MediaFields
      }
      small {
        ...MediaFields
      }
      medium {
        ...MediaFields
      }
    }
  }
  coverPicture {
    ... on NftImage {
      contractAddress
      tokenId
      uri
      verified
    }
    ... on MediaSet {
      original {
        ...MediaFields
      }
      small {
        ...MediaFields
      }
      medium {
        ...MediaFields
      }
    }
  }
  ownedBy
  dispatcher {
    address
    canUseRelay
  }
  stats {
    totalFollowers
    totalFollowing
    totalPosts
    totalComments
    totalMirrors
    totalPublications
    totalCollects
  }
  followModule {
    ...FollowModuleFields
  }
  onChainIdentity {
    ens {
      name
    }
    proofOfHumanity
    sybilDotOrg {
      verified
      source {
        twitter {
          handle
        }
      }
    }
    worldcoin {
      isHuman
    }
  }
}

fragment PublicationStatsFields on PublicationStats {
  totalUpvotes
  totalDownvotes
  totalAmountOfMirrors
  totalAmountOfCollects
  totalAmountOfComments
}

fragment MetadataOutputFields on MetadataOutput {
  name
  description
  content
  contentWarning
  media {
    original {
      ...MediaFields
    }
    small {
      ...MediaFields
    }
    medium {
      ...MediaFields
    }
  }
  tags
  attributes {
    displayType
    traitType
    value
  }
  encryptionParams {
    providerSpecificParams {
      encryptionKey
    }
    accessCondition {
      ...AccessConditionFields
    }
    encryptedFields {
      animation_url
      content
      external_url
      image
      media {
        ...EncryptedMediaSetFields
      }
    }
  }
  mainContentFocus
}

fragment Erc20Fields on Erc20 {
  name
  symbol
  decimals
  address
}

fragment PostFields on Post {
  id
  profile {
    ...ProfileFields
  }
  stats {
    ...PublicationStatsFields
  }
  metadata {
    ...MetadataOutputFields
  }
  createdAt
  collectModule {
    ...CollectModuleFields
  }
  referenceModule {
    ...ReferenceModuleFields
  }
  appId
  hidden
  reaction(request: $reactionRequest)
  mirrors(by: $profileId)
  hasCollectedByMe
  canComment(profileId: $profileId) {
    result
  }
  canMirror(profileId: $profileId) {
    result
  }
  canDecrypt(profileId: $profileId) {
    result
    reasons
  }
  isGated
}

fragment StatsFields on PublicationStats {
  totalUpvotes
  totalAmountOfMirrors
  totalAmountOfCollects
  totalAmountOfComments
}

fragment MirrorBaseFields on Mirror {
  id
  profile {
    ...ProfileFields
  }
  stats {
    ...PublicationStatsFields
    ...StatsFields
  }
  metadata {
    ...MetadataOutputFields
  }
  createdAt
  collectModule {
    ...CollectModuleFields
  }
  referenceModule {
    ...ReferenceModuleFields
  }
  appId
  hidden
  reaction(request: null)
  hasCollectedByMe
  isGated
}

fragment MirrorFields on Mirror {
  id
  profile {
    ...ProfileFields
  }
  reaction(request: $reactionRequest)
  isGated
  canComment(profileId: $profileId) {
    result
  }
  canMirror(profileId: $profileId) {
    result
  }
  canDecrypt(profileId: $profileId) {
    result
    reasons
  }
  collectModule {
    ...CollectModuleFields
  }
  stats {
    ...StatsFields
  }
  metadata {
    ...MetadataFields
  }
  hidden
  mirrorOf {
    ... on Post {
      ...PostFields
    }
    ... on Comment {
      id
      profile {
        ...ProfileFields
      }
      collectNftAddress
      reaction(request: $reactionRequest)
      mirrors(by: $profileId)
      onChainContentURI
      isGated
      canComment(profileId: $profileId) {
        result
      }
      canMirror(profileId: $profileId) {
        result
      }
      canDecrypt(profileId: $profileId) {
        result
        reasons
      }
      stats {
        ...StatsFields
      }
      createdAt
    }
  }
  createdAt
  appId
}

fragment CommentBaseFields on Comment {
  __typename
  id
  profile {
    ...ProfileFields
  }
  stats {
    ...PublicationStatsFields
  }
  metadata {
    ...MetadataOutputFields
  }
  createdAt
  collectModule {
    ...CollectModuleFields
  }
  referenceModule {
    ...ReferenceModuleFields
  }
  appId
  hidden
  reaction(request: $reactionRequest)
  mirrors(by: null)
  hasCollectedByMe
  isGated
}

fragment CommentFields on Comment {
  ...CommentBaseFields
  mainPost {
    ... on Post {
      ...PostFields
    }
    ... on Mirror {
      ...MirrorBaseFields
      mirrorOf {
        ... on Post {
          ...PostFields
        }
        ... on Comment {
          ...CommentMirrorOfFields
        }
      }
    }
  }
  metadata {
    ...MetadataFields
  }
}

fragment CommentMirrorOfFields on Comment {
  ...CommentBaseFields
  mainPost {
    ... on Post {
      ...PostFields
    }
    ... on Mirror {
      ...MirrorBaseFields
    }
  }
}

fragment TxReceiptFields on TransactionReceipt {
  to
  from
  contractAddress
  transactionIndex
  root
  gasUsed
  logsBloom
  blockHash
  transactionHash
  blockNumber
  confirmations
  cumulativeGasUsed
  effectiveGasPrice
  byzantium
  type
  status
  logs {
    blockNumber
    blockHash
    transactionIndex
    removed
    address
    data
    topics
    transactionHash
    logIndex
  }
}

fragment WalletFields on Wallet {
  address
  defaultProfile {
    ...ProfileFields
  }
}

fragment CommonPaginatedResultInfoFields on PaginatedResultInfo {
  prev
  next
  totalCount
}

fragment FollowModuleFields on FollowModule {
  ... on FeeFollowModuleSettings {
    type
    amount {
      asset {
        name
        symbol
        decimals
        address
      }
      value
    }
    recipient
  }
  ... on ProfileFollowModuleSettings {
    type
    contractAddress
  }
  ... on RevertFollowModuleSettings {
    type
    contractAddress
  }
  ... on UnknownFollowModuleSettings {
    type
    contractAddress
    followModuleReturnData
  }
}

fragment CollectModuleFields on CollectModule {
  __typename
  ... on FreeCollectModuleSettings {
    type
    followerOnly
    contractAddress
  }
  ... on FeeCollectModuleSettings {
    type
    referralFee
    contractAddress
    followerOnly
    amount {
      asset {
        symbol
        decimals
        address
      }
      value
    }
    recipient
    referralFee
  }
  ... on LimitedFeeCollectModuleSettings {
    type
    collectLimit
    amount {
      asset {
        ...Erc20Fields
      }
      value
    }
    recipient
    referralFee
  }
  ... on LimitedTimedFeeCollectModuleSettings {
    type
    collectLimit
    amount {
      asset {
        ...Erc20Fields
      }
      value
    }
    recipient
    referralFee
    endTimestamp
  }
  ... on RevertCollectModuleSettings {
    type
  }
  ... on TimedFeeCollectModuleSettings {
    type
    amount {
      asset {
        ...Erc20Fields
      }
      value
    }
    recipient
    referralFee
    endTimestamp
  }
  ... on UnknownCollectModuleSettings {
    type
    contractAddress
    collectModuleReturnData
  }
}

fragment ReferenceModuleFields on ReferenceModule {
  ... on FollowOnlyReferenceModuleSettings {
    type
    contractAddress
  }
  ... on UnknownReferenceModuleSettings {
    type
    contractAddress
    referenceModuleReturnData
  }
  ... on DegreesOfSeparationReferenceModuleSettings {
    type
    contractAddress
    commentsRestricted
    mirrorsRestricted
    degreesOfSeparation
  }
}

fragment Erc20OwnershipFields on Erc20OwnershipOutput {
  contractAddress
  amount
  chainID
  condition
  decimals
}

fragment EoaOwnershipFields on EoaOwnershipOutput {
  address
}

fragment NftOwnershipFields on NftOwnershipOutput {
  contractAddress
  chainID
  contractType
  tokenIds
}

fragment ProfileOwnershipFields on ProfileOwnershipOutput {
  profileId
}

fragment FollowConditionFields on FollowConditionOutput {
  profileId
}

fragment CollectConditionFields on CollectConditionOutput {
  publicationId
  thisPublication
}

fragment AndConditionFields on AndConditionOutput {
  criteria {
    ...AccessConditionFields
  }
}

fragment OrConditionFields on OrConditionOutput {
  criteria {
    ...AccessConditionFields
  }
}
fragment AndConditionFieldsNoRecursive on AndConditionOutput {
  criteria {
    ...SimpleConditionFields
  }
}

fragment OrConditionFieldsNoRecursive on OrConditionOutput {
  criteria {
    ...SimpleConditionFields
  }
}

fragment SimpleConditionFields on AccessConditionOutput {
  nft {
    ...NftOwnershipFields
  }
  eoa {
    ...EoaOwnershipFields
  }
  token {
    ...Erc20OwnershipFields
  }
  profile {
    ...ProfileOwnershipFields
  }
  follow {
    ...FollowConditionFields
  }
  collect {
    ...CollectConditionFields
  }
}

fragment BooleanConditionFieldsRecursive on AccessConditionOutput {
  and {
    criteria {
      ...SimpleConditionFields
      and {
        criteria {
          ...SimpleConditionFields
        }
      }
      or {
        criteria {
          ...SimpleConditionFields
        }
      }
    }
  }
  or {
    criteria {
      ...SimpleConditionFields
      and {
        criteria {
          ...SimpleConditionFields
        }
      }
      or {
        criteria {
          ...SimpleConditionFields
        }
      }
    }
  }
}

fragment AccessConditionFields on AccessConditionOutput {
  ...SimpleConditionFields
  ...BooleanConditionFieldsRecursive
}

fragment EncryptedMediaFields on EncryptedMedia {
  url
  width
  height
  mimeType
}

fragment EncryptedMediaSetFields on EncryptedMediaSet {
  original {
    ...EncryptedMediaFields
  }
  small {
    ...EncryptedMediaFields
  }
  medium {
    ...EncryptedMediaFields
  }
}

fragment RelayerResultFields on RelayResult {
  ... on RelayerResult {
    txHash
    txId
  }
  ... on RelayError {
    reason
  }
}
fragment MetadataFields on MetadataOutput {
  name
  content
  image
  attributes {
    traitType
    value
  }
  cover {
    original {
      url
    }
  }
  media {
    original {
      url
      mimeType
    }
  }
  encryptionParams {
    accessCondition {
      or {
        criteria {
          ...SimpleConditionFields
          and {
            criteria {
              ...SimpleConditionFields
            }
          }
          or {
            criteria {
              ...SimpleConditionFields
            }
          }
        }
      }
    }
  }
}
